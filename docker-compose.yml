---
services:
  main:
    build: .
    ports:
      - "8081:8081"
    depends_on:
      pulsar-init:
        condition: service_completed_successfully
      s3ninja:
        condition: service_started
      mock-asr:
        condition: service_started
    environment:
      # logging
      LOG_LEVEL: "info"

      # metrics
      METRICS_ENABLED: "true"
      METRICS_PORT: "8081"

      LOCAL: "true"

      # tracing
      TRACING_ENABLED: "false"
      TRACING_SAMPLERATE: "1.0"
      TRACING_SERVICE: "transcribe"
      TRACING_VERSION: "0.0.1"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://lgtm:4317"

      # grpc (otlp tracing)
      # GRPC_GO_LOG_VERBOSITY_LEVEL: 99
      # GRPC_GO_LOG_SEVERITY_LEVEL: info

      # pulsar configuration
      PULSAR_URL: "pulsar://pulsar:6650"
      PULSAR_INPUT_TOPIC: "public/transcribe/file-queue"
      PULSAR_OUTPUT_TOPIC: "public/transcribe/transcription-results"
      PULSAR_SUBSCRIPTION: "transcribe-consumer"

      # s3 configuration
      S3_REGION: "us-east-1"
      S3_BUCKET: "audio"
      AWS_ACCESS_KEY_ID: "AKIAIOSFODNN7EXAMPLE"
      AWS_SECRET_ACCESS_KEY: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
      S3_ENDPOINT: "http://s3ninja:9444"

      # target endpoint
      TARGET_ENDPOINT: "http://mock-asr:1080/transcribe"

      # worker configuration
      WORKER_COUNT: "3"

  pulsar:
    image: apachepulsar/pulsar:4.0.2
    ports:
      - "6650:6650"
      - "8089:8080"
    environment:
      - PULSAR_STANDALONE_USE_ZOOKEEPER=1
    command: "bin/pulsar standalone"
    healthcheck:
      test: ["CMD", "bin/pulsar-admin", "brokers", "healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 5

  pulsar-init:
    image: apachepulsar/pulsar:4.0.2
    command: >
      bash -c "
        set -e
        echo 'Waiting for Pulsar to be ready...'
        sleep 10
        
        echo 'Creating namespace...'
        bin/pulsar-admin --admin-url=http://pulsar:8080 namespaces create public/transcribe || echo 'Namespace may already exist'
        
        echo 'Creating input topic...'
        bin/pulsar-admin --admin-url=http://pulsar:8080 topics create-partitioned-topic public/transcribe/file-queue -p 4 || echo 'Input topic may already exist'
        
        echo 'Creating output topic...'
        bin/pulsar-admin --admin-url=http://pulsar:8080 topics create-partitioned-topic public/transcribe/transcription-results -p 4 || echo 'Output topic may already exist'
        
        echo 'Pulsar initialization completed successfully'
      "
    depends_on:
      pulsar:
        condition: service_healthy

  s3ninja:
    image: scireum/s3-ninja:latest
    ports:
      - "9444:9000"
    volumes:
      - ./docker/s3ninja:/home/sirius/data

  mock-asr:
    image: mockserver/mockserver:5.15.0
    ports:
      - "1080:1080"
    environment:
      - MOCKSERVER_WATCH_INITIALIZATION_JSON=true
      - MOCKSERVER_PROPERTY_FILE=/config/mockserver.properties
      - MOCKSERVER_INITIALIZATION_JSON_PATH=/config/initializerJson.json
    volumes:
      - ./docker/mock-asr:/config
    command: -logLevel INFO -serverPort 1080

  lgtm:
    image: grafana/otel-lgtm
    ports:
      - "3000:3000" # Grafana UI
      - "4317:4317" # OTLP
      - "4318:4318" # OTLPHTTP
    volumes:
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
      - ./docker/grafana/dashboards.yaml:/otel-lgtm/grafana/conf/provisioning/dashboards/grafana-dashboards.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true

volumes:
  pulsar_data:
